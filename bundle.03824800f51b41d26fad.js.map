{"version":3,"file":"bundle.03824800f51b41d26fad.js","mappings":"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","sources":["webpack://hangman/webpack/bootstrap","webpack://hangman/webpack/runtime/global","webpack://hangman/webpack/runtime/publicPath","webpack://hangman/./src/scripts/html-structure/createElementWithClasses.js","webpack://hangman/./src/scripts/html-structure/createHtmlStructure.js","webpack://hangman/./src/scripts/html-structure/addAppContainer.js","webpack://hangman/./src/scripts/html-structure/layout/addHeader.js","webpack://hangman/./src/scripts/html-structure/layout/addGallowSection.js","webpack://hangman/./src/scripts/html-structure/layout/addCounterSection.js","webpack://hangman/./src/scripts/html-structure/layout/addWordSection.js","webpack://hangman/./src/scripts/html-structure/layout/addHintSection.js","webpack://hangman/./src/scripts/common-variables.js","webpack://hangman/./src/scripts/html-structure/createKeypad.js","webpack://hangman/./src/scripts/html-structure/layout/addKeypadSection.js","webpack://hangman/./src/scripts/html-structure/components/createKeysForKeypad.js","webpack://hangman/./src/scripts/html-structure/components/createKeyNode.js","webpack://hangman/./src/scripts/html-structure/message/createMsgOnlyEngLetters.js","webpack://hangman/./src/scripts/html-structure/message/showMsgOnlyEngLetters.js","webpack://hangman/./src/scripts/counter/getSetAttemptCounter.js","webpack://hangman/./src/scripts/questions/getQuestionsWithIds.js","webpack://hangman/./src/scripts/word/getSetCurrentWord.js","webpack://hangman/./src/scripts/counter/getHangmanNodes.js","webpack://hangman/./src/scripts/word/showNewWord.js","webpack://hangman/./src/scripts/counter/resetAttemptCounter.js","webpack://hangman/./src/scripts/word/resetViewFromLastWord.js","webpack://hangman/./src/scripts/counter/resetHangmanView.js","webpack://hangman/./src/scripts/questions/getRandomQuestion.js","webpack://hangman/./src/scripts/html-structure/components/createLettersForWord.js","webpack://hangman/./src/scripts/html-structure/components/createLetterNode.js","webpack://hangman/./src/scripts/modals/modal-restart/createModalRestart.js","webpack://hangman/./src/scripts/modals/modal-restart/showModalRestart.js","webpack://hangman/./src/scripts/keypad/handleKeyNodeClickEvent.js","webpack://hangman/./src/scripts/counter/increaseAttemptCounterByOne.js","webpack://hangman/./src/scripts/counter/addElementToHangman.js","webpack://hangman/./src/scripts/html-structure/addKeypadEventListeners.js","webpack://hangman/./src/scripts/keypad/checkKeyDownEvent.js","webpack://hangman/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","export const createElementWithClasses = (tagName, classListString) => {\r\n  const elementWithClasses = document.createElement(tagName);\r\n  if (classListString && classListString !== \"\") {\r\n    elementWithClasses.classList.add(...classListString.split(\" \"));\r\n  }\r\n\r\n  return elementWithClasses;\r\n};\r\n","import { addAppContainer } from \"./addAppContainer\";\r\nimport { addHeader } from \"./layout/addHeader\";\r\nimport { addGallowSection } from \"./layout/addGallowSection\";\r\nimport { addCounterSection } from \"./layout/addCounterSection\";\r\nimport { addWordSection } from \"./layout/addWordSection\";\r\nimport { addHintSection } from \"./layout/addHintSection\";\r\n\r\nconst { body } = document;\r\nbody.classList.add(\"page\");\r\nconst appContainer = addAppContainer(body);\r\naddHeader(appContainer);\r\nconst gallowImage = addGallowSection(appContainer);\r\nconst attemptCounterNode = addCounterSection(appContainer);\r\nconst wordContainer = addWordSection(appContainer);\r\nconst hintText = addHintSection(appContainer);\r\n\r\nexport {\r\n  appContainer,\r\n  gallowImage,\r\n  attemptCounterNode,\r\n  wordContainer,\r\n  hintText,\r\n};\r\n","import { createElementWithClasses } from \"./createElementWithClasses\";\r\n\r\nexport const addAppContainer = (body) => {\r\n  const appContainer = createElementWithClasses(\"div\", \"app-container\");\r\n  body.appendChild(appContainer);\r\n\r\n  return appContainer;\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\n\r\nexport const addHeader = (appContainer) => {\r\n  const header = createElementWithClasses(\"header\", \"header\");\r\n  const headerTitle = createElementWithClasses(\"h1\", \"header__title\");\r\n  headerTitle.textContent = \"Hangman Game\";\r\n  header.appendChild(headerTitle);\r\n  appContainer.appendChild(header);\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\nimport GallowImage from \"../../../assets/images/gallow-with-hangman.svg\";\r\n\r\nexport const addGallowSection = (parentElement) => {\r\n  const gallowSection = createElementWithClasses(\"section\", \"gallow\");\r\n  const gallowContainer = createElementWithClasses(\"div\", \"gallow__image\");\r\n  gallowContainer.innerHTML = GallowImage;\r\n  gallowSection.appendChild(gallowContainer);\r\n  parentElement.appendChild(gallowSection);\r\n\r\n  return gallowContainer;\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\n\r\nexport const addCounterSection = (parentElement) => {\r\n  const counterSection = createElementWithClasses(\"section\", \"counter\");\r\n  const counterContainer = createElementWithClasses(\r\n    \"div\",\r\n    \"counter__container\"\r\n  );\r\n  const counterTitle = createElementWithClasses(\"div\", \"counter__title\");\r\n  const counterAttempts = createElementWithClasses(\r\n    \"div\",\r\n    \"attempt counter__attempts\"\r\n  );\r\n  const attemptWrong = createElementWithClasses(\"span\", \"attempt__wrong\");\r\n  const attemptLine = createElementWithClasses(\"span\", \"attempt__line\");\r\n  const attemptAll = createElementWithClasses(\"span\", \"attempt__all\");\r\n  counterTitle.append(\"Incorrect guesses:\");\r\n  attemptWrong.append(\"0\");\r\n  attemptLine.append(\"/\");\r\n  attemptAll.append(\"6\");\r\n\r\n  counterAttempts.append(attemptWrong, attemptLine, attemptAll);\r\n  counterContainer.append(counterTitle, counterAttempts);\r\n  counterSection.appendChild(counterContainer);\r\n  parentElement.appendChild(counterSection);\r\n\r\n  return attemptWrong;\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\n\r\nexport const addWordSection = (parentElement) => {\r\n  const wordSection = createElementWithClasses(\"section\", \"word\");\r\n  const wordContainer = createElementWithClasses(\"div\", \"word__container\");\r\n  wordSection.appendChild(wordContainer);\r\n  parentElement.appendChild(wordSection);\r\n\r\n  return wordContainer;\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\n\r\nexport const addHintSection = (parentElement) => {\r\n  const hintSection = createElementWithClasses(\"section\", \"hint\");\r\n  const hintContainer = createElementWithClasses(\"div\", \"hint__container\");\r\n  const hintTitle = createElementWithClasses(\"h2\", \"hint__title\");\r\n  hintTitle.append(\"Hint\");\r\n  const hintText = createElementWithClasses(\"div\", \"hint__text\");\r\n  hintContainer.append(hintTitle, hintText);\r\n  hintSection.appendChild(hintContainer);\r\n  parentElement.appendChild(hintSection);\r\n\r\n  return hintText;\r\n};\r\n","const idSymbol = Symbol(\"questionId\");\r\nconst keyPadLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n\r\nexport { idSymbol, keyPadLetters };\r\n","import { appContainer } from \"./createHtmlStructure\";\r\nimport { addKeypadSection } from \"./layout/addKeypadSection\";\r\nimport { createKeysForKeypad } from \"./components/createKeysForKeypad\";\r\n\r\nconst keypadContainer = addKeypadSection(appContainer);\r\nconst keypadNodes = createKeysForKeypad(keypadContainer);\r\n\r\nconst disableKeypadNode = (keyIndex) => {\r\n  keypadNodes[keyIndex].active = false;\r\n  keypadNodes[keyIndex].node.disabled = true;\r\n  keypadNodes[keyIndex].node.classList.add(\"keypad__key_inactive\");\r\n};\r\n\r\nconst enableAllKeypadNodes = () => {\r\n  keypadNodes.forEach((_, keyIndex) => {\r\n    keypadNodes[keyIndex].active = true;\r\n    keypadNodes[keyIndex].node.disabled = false;\r\n    keypadNodes[keyIndex].node.classList.remove(\"keypad__key_inactive\");\r\n  });\r\n};\r\n\r\nconst isKeypadNodeActive = (keyIndex) => {\r\n  return keypadNodes[keyIndex].active;\r\n};\r\n\r\nexport {\r\n  keypadNodes,\r\n  disableKeypadNode,\r\n  isKeypadNodeActive,\r\n  enableAllKeypadNodes,\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\n\r\nexport const addKeypadSection = (parentElement) => {\r\n  const keypadSection = createElementWithClasses(\"section\", \"keypad\");\r\n  const keypadContainer = createElementWithClasses(\"div\", \"keypad__container\");\r\n\r\n  keypadSection.appendChild(keypadContainer);\r\n  parentElement.appendChild(keypadSection);\r\n\r\n  return keypadContainer;\r\n};\r\n","import { createKeyNode } from \"./createKeyNode\";\r\nimport { keyPadLetters } from \"../../common-variables\";\r\n\r\nexport const createKeysForKeypad = (keypadContainer) => {\r\n  const keypadNodes = keyPadLetters.map((letter) => {\r\n    const keyNode = createKeyNode(letter);\r\n    keypadContainer.appendChild(keyNode);\r\n    return { letter, node: keyNode, active: true };\r\n  });\r\n\r\n  return keypadNodes;\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\n\r\nexport const createKeyNode = (keyLetter) => {\r\n  const keyNode = createElementWithClasses(\"button\", \"keypad__key\");\r\n  keyNode.append(keyLetter);\r\n\r\n  return keyNode;\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\n\r\nconst msgOnlyEng = createElementWithClasses(\r\n  \"div\",\r\n  \"msg-only-eng msg-only-eng_hidden\"\r\n);\r\nmsgOnlyEng.append(\r\n  \"Please, switch to the English layout to enter English Latin letter.\"\r\n);\r\n\r\ndocument.body.appendChild(msgOnlyEng);\r\n\r\nexport { msgOnlyEng };\r\n","import { msgOnlyEng } from \"./createMsgOnlyEngLetters\";\r\n\r\nconst showMsgOnlyEngLetters = () => {\r\n  msgOnlyEng.classList.remove(\"msg-only-eng_hidden\");\r\n};\r\n\r\nconst hideMsgOnlyEngLetters = () => {\r\n  msgOnlyEng.classList.add(\"msg-only-eng_hidden\");\r\n};\r\n\r\nexport { showMsgOnlyEngLetters, hideMsgOnlyEngLetters };\r\n","const maxWrongAnswers = 6;\r\n\r\nconst attemptCounter = {\r\n  value: 0,\r\n};\r\n\r\nconst setAttemptCounter = (newValue) => {\r\n  attemptCounter.value = newValue;\r\n};\r\n\r\nexport { attemptCounter, setAttemptCounter, maxWrongAnswers };\r\n","import { idSymbol } from \"../common-variables\";\r\nimport QuestionsData from \"../../data/questions.json\";\r\n\r\nconst getQuestionsWithIds = () => {\r\n  const QuestionsDataWithIds = QuestionsData.map((question, idx) => {\r\n    const questionWithId = { ...question };\r\n    questionWithId[idSymbol] = idx;\r\n    return questionWithId;\r\n  });\r\n\r\n  return QuestionsDataWithIds;\r\n};\r\n\r\nconst questions = getQuestionsWithIds();\r\n\r\nexport { questions };\r\n","const currentWord = {\r\n  question: {},\r\n  letterNodes: [],\r\n};\r\n\r\nconst setRandomQuestion = (newRandomQuestion) => {\r\n  currentWord.question = newRandomQuestion;\r\n};\r\n\r\nconst setWordNodesArray = (newWordNodesArray) => {\r\n  currentWord.letterNodes = newWordNodesArray;\r\n};\r\n\r\nexport { currentWord, setRandomQuestion, setWordNodesArray };\r\n","const hangmanHead = document.getElementById(\"hangman__head\");\r\nconst hangmanBody = document.getElementById(\"hangman__body\");\r\nconst hangmanHandLeft = document.getElementById(\"hangman__hand-left\");\r\nconst hangmanHandRight = document.getElementById(\"hangman__hand-right\");\r\nconst hangmanLegLeft = document.getElementById(\"hangman__leg-left\");\r\nconst hangmanLegRight = document.getElementById(\"hangman__leg-right\");\r\n\r\nconst hangmanNodesArray = [\r\n  hangmanHead,\r\n  hangmanBody,\r\n  hangmanHandLeft,\r\n  hangmanHandRight,\r\n  hangmanLegLeft,\r\n  hangmanLegRight,\r\n];\r\n\r\nexport { hangmanNodesArray };\r\n","import { createLettersForWord } from \"../html-structure/components/createLettersForWord\";\r\nimport { getRandomQuestion } from \"../questions/getRandomQuestion\";\r\nimport { setRandomQuestion, setWordNodesArray } from \"./getSetCurrentWord\";\r\nimport { wordContainer, hintText } from \"../html-structure/createHtmlStructure\";\r\nimport { resetViewFromLastWord } from \"./resetViewFromLastWord\";\r\n\r\nexport const showNewWord = () => {\r\n  resetViewFromLastWord();\r\n  const newRandomQuestion = getRandomQuestion();\r\n  const wordNodes = createLettersForWord(\r\n    wordContainer,\r\n    newRandomQuestion.answer\r\n  );\r\n\r\n  setRandomQuestion(newRandomQuestion);\r\n  setWordNodesArray(wordNodes);\r\n  hintText.append(newRandomQuestion.hint);\r\n\r\n  console.log(\r\n    `Answer: ${newRandomQuestion.answer.toUpperCase().split(\"\").join(\" \")}`\r\n  );\r\n};\r\n","import { attemptCounter, setAttemptCounter } from \"./getSetAttemptCounter\";\r\nimport { attemptCounterNode } from \"../html-structure/createHtmlStructure\";\r\n\r\nexport const resetAttemptCounter = () => {\r\n  setAttemptCounter(0);\r\n  attemptCounterNode.textContent = attemptCounter.value.toString();\r\n  attemptCounterNode.classList.remove(\"attempt__wrong_nonzero\");\r\n};\r\n","import { resetAttemptCounter } from \"../counter/resetAttemptCounter\";\r\nimport { resetHangmanView } from \"../counter/resetHangmanView\";\r\nimport { hintText, wordContainer } from \"../html-structure/createHtmlStructure\";\r\nimport { enableAllKeypadNodes } from \"../html-structure/createKeypad\";\r\n\r\nexport const resetViewFromLastWord = () => {\r\n  resetAttemptCounter();\r\n  wordContainer.replaceChildren();\r\n  enableAllKeypadNodes();\r\n  hintText.replaceChildren();\r\n  resetHangmanView();\r\n};\r\n","import { hangmanNodesArray } from \"./getHangmanNodes\";\r\n\r\nexport const resetHangmanView = () => {\r\n  hangmanNodesArray.forEach((node, idx) => {\r\n    const attributeStr = idx === 0 ? \"stroke-opacity\" : \"fill-opacity\";\r\n    node.setAttribute(attributeStr, \"0\");\r\n  });\r\n};\r\n","import { idSymbol } from \"../common-variables\";\r\nimport { questions } from \"./getQuestionsWithIds\";\r\n\r\nexport const getRandomQuestion = () => {\r\n  const questionsQty = questions.length;\r\n  const randomId = Math.floor(Math.random() * questionsQty);\r\n\r\n  const randomQuestion = questions.find(\r\n    (question) => question[idSymbol] === randomId\r\n  );\r\n\r\n  return randomQuestion;\r\n};\r\n","import { createLetterNode } from \"./createLetterNode\";\r\n\r\nexport const createLettersForWord = (wordContainer, word) => {\r\n  const wordArray = word.split(\"\").map((letter) => {\r\n    const letterNode = createLetterNode();\r\n    wordContainer.appendChild(letterNode);\r\n    return { letter, node: letterNode, isOpen: false };\r\n  });\r\n\r\n  return wordArray;\r\n};\r\n","import { createElementWithClasses } from \"../createElementWithClasses\";\r\n\r\nexport const createLetterNode = () => {\r\n  const letterNode = createElementWithClasses(\"div\", \"letter word__letter\");\r\n  const line = createElementWithClasses(\"div\", \"letter__line\");\r\n  letterNode.appendChild(line);\r\n\r\n  return letterNode;\r\n};\r\n","import { createElementWithClasses } from \"../../html-structure/createElementWithClasses\";\r\nimport { appContainer } from \"../../html-structure/createHtmlStructure\";\r\nimport { showNewWord } from \"../../word/showNewWord\";\r\n\r\nconst modalRestart = createElementWithClasses(\"section\", \"modal-restart\");\r\nconst modalContainer = createElementWithClasses(\r\n  \"div\",\r\n  \"modal-restart__container\"\r\n);\r\nconst modalBackdrop = createElementWithClasses(\r\n  \"div\",\r\n  \"modal-restart__backdrop\"\r\n);\r\nconst modalHeader = createElementWithClasses(\"div\", \"modal-restart__header\");\r\nconst modalTitle = createElementWithClasses(\"div\", \"modal-restart__title\");\r\nconst modalImage = createElementWithClasses(\"img\", \"modal-restart__image\");\r\nmodalHeader.append(modalTitle, modalImage);\r\nconst modalSubtitle = createElementWithClasses(\r\n  \"div\",\r\n  \"modal-restart__subtitle\"\r\n);\r\nconst modalText = createElementWithClasses(\"div\", \"modal-restart__text\");\r\nconst modalAnswer = createElementWithClasses(\"div\", \"modal-restart__answer\");\r\nconst modalPlayAgainBtn = createElementWithClasses(\r\n  \"button\",\r\n  \"modal-restart__button\"\r\n);\r\n\r\nconst closeModalRestart = () => {\r\n  console.log(\"click\");\r\n  const htmlBody = document.body;\r\n  htmlBody.classList.remove(\"page_no-scroll\");\r\n  modalRestart.classList.remove(\"modal__restart_open\");\r\n  modalTitle.replaceChildren();\r\n  modalSubtitle.replaceChildren();\r\n  modalAnswer.replaceChildren();\r\n  modalImage.src = \"\";\r\n  modalImage.alt = \"\";\r\n  showNewWord();\r\n};\r\n\r\nmodalPlayAgainBtn.addEventListener(\"click\", () => closeModalRestart());\r\n\r\nmodalText.append(\"The correct word:\");\r\nmodalPlayAgainBtn.append(\"Play again\");\r\nmodalContainer.append(\r\n  modalTitle,\r\n  modalImage,\r\n  modalSubtitle,\r\n  modalText,\r\n  modalAnswer,\r\n  modalPlayAgainBtn\r\n);\r\nmodalRestart.append(modalContainer, modalBackdrop);\r\nconst modalRestartNodes = {\r\n  container: modalContainer,\r\n  title: modalTitle,\r\n  img: modalImage,\r\n  subtitle: modalSubtitle,\r\n  text: modalText,\r\n  answer: modalAnswer,\r\n  button: modalPlayAgainBtn,\r\n};\r\n\r\nappContainer.append(modalRestart);\r\n\r\nexport { modalRestart, modalRestartNodes };\r\n","import ImageGameOver from \"../../../assets/images/game-over.png\";\r\nimport ImageGameOWin from \"../../../assets/images/game-win.png\";\r\nimport { modalRestart, modalRestartNodes } from \"./createModalRestart\";\r\nimport { currentWord } from \"../../word/getSetCurrentWord\";\r\n\r\nexport const showModalRestart = (isGameOver) => {\r\n  modalRestartNodes.img.src = isGameOver ? ImageGameOver : ImageGameOWin;\r\n  modalRestartNodes.img.alt = isGameOver ? \"white scull\" : \"top black hat with\";\r\n  modalRestartNodes.title.append(isGameOver ? \"game over\" : \"you win!\");\r\n  modalRestartNodes.subtitle.append(\r\n    isGameOver\r\n      ? \"Whooops... You were too late...\"\r\n      : \"Congratulations! Hats off to you.\"\r\n  );\r\n  modalRestartNodes.answer.append(currentWord.question.answer);\r\n\r\n  if (isGameOver) {\r\n    modalRestartNodes.container.classList.remove(\r\n      \"modal-restart__container_win\"\r\n    );\r\n    modalRestartNodes.subtitle.classList.remove(\r\n      \"modal-restart__subtitle_basic\"\r\n    );\r\n    modalRestartNodes.text.classList.remove(\"modal-restart__text_lighter\");\r\n    modalRestartNodes.answer.classList.remove(\"modal-restart__answer_lighter\");\r\n  } else {\r\n    modalRestartNodes.container.classList.add(\"modal-restart__container_win\");\r\n    modalRestartNodes.subtitle.classList.add(\"modal-restart__subtitle_basic\");\r\n    modalRestartNodes.text.classList.add(\"modal-restart__text_lighter\");\r\n    modalRestartNodes.answer.classList.add(\"modal-restart__answer_lighter\");\r\n  }\r\n\r\n  const htmlBody = document.body;\r\n  htmlBody.classList.add(\"page_no-scroll\");\r\n  modalRestart.classList.add(\"modal__restart_open\");\r\n};\r\n","import { increaseAttemptCounterByOne } from \"../counter/increaseAttemptCounterByOne\";\r\nimport { currentWord } from \"../word/getSetCurrentWord\";\r\nimport {\r\n  disableKeypadNode,\r\n  isKeypadNodeActive,\r\n} from \"../html-structure/createKeypad\";\r\nimport { showModalRestart } from \"../modals/modal-restart/showModalRestart\";\r\nimport {\r\n  attemptCounter,\r\n  maxWrongAnswers,\r\n} from \"../counter/getSetAttemptCounter\";\r\n\r\nexport const handleKeyNodeClickEvent = (event, pressedLetter, keyNodeIndex) => {\r\n  const eventKeyNode = event.target;\r\n  if (typeof eventKeyNode === \"undefined\") {\r\n    return;\r\n  }\r\n  if (!isKeypadNodeActive(keyNodeIndex)) {\r\n    return;\r\n  }\r\n  if (attemptCounter.value >= maxWrongAnswers) {\r\n    return;\r\n  }\r\n  const answerLetters = currentWord.question\r\n    ? currentWord.question.answer.toUpperCase().split(\"\")\r\n    : [\"\"];\r\n  const pressedLetterUpper = pressedLetter.toUpperCase();\r\n\r\n  if (answerLetters.includes(pressedLetterUpper)) {\r\n    answerLetters.forEach((letter, idx) => {\r\n      if (letter === pressedLetterUpper) {\r\n        currentWord.letterNodes[idx].isOpen = true;\r\n        const letterNode = currentWord.letterNodes[idx].node;\r\n        letterNode.classList.add(\"word__letter_open\");\r\n        letterNode.append(letter);\r\n      }\r\n    });\r\n    const isAllLettersOpen = currentWord.letterNodes.every(\r\n      (letterNode) => letterNode.isOpen\r\n    );\r\n    if (isAllLettersOpen) {\r\n      const isGameOver = false;\r\n      setTimeout(() => showModalRestart(isGameOver), 400);\r\n    }\r\n  } else {\r\n    increaseAttemptCounterByOne();\r\n  }\r\n\r\n  disableKeypadNode(keyNodeIndex);\r\n};\r\n","import {\r\n  attemptCounter,\r\n  setAttemptCounter,\r\n  maxWrongAnswers,\r\n} from \"./getSetAttemptCounter\";\r\nimport { attemptCounterNode } from \"../html-structure/createHtmlStructure\";\r\nimport { showModalRestart } from \"../modals/modal-restart/showModalRestart\";\r\nimport { addElementToHangman } from \"./addElementToHangman\";\r\n\r\nexport const increaseAttemptCounterByOne = () => {\r\n  const firstWrongAnswer = 1;\r\n  // when user clicked on the keypad while modal window is opened\r\n  if (attemptCounter.value >= maxWrongAnswers) {\r\n    return;\r\n  }\r\n  setAttemptCounter(attemptCounter.value + 1);\r\n  attemptCounterNode.textContent = attemptCounter.value.toString();\r\n  addElementToHangman(attemptCounter.value);\r\n  if (attemptCounter.value === firstWrongAnswer) {\r\n    attemptCounterNode.classList.add(\"attempt__wrong_nonzero\");\r\n  } else if (attemptCounter.value === maxWrongAnswers) {\r\n    const isGameOver = true;\r\n    setTimeout(() => showModalRestart(isGameOver), 400);\r\n  }\r\n};\r\n","import { hangmanNodesArray } from \"./getHangmanNodes\";\r\n\r\nexport const addElementToHangman = (currentAttempt) => {\r\n  // when user clicked on the keypad while modal window is opened\r\n  if (currentAttempt > hangmanNodesArray.length) {\r\n    return;\r\n  }\r\n  const nodeToDraw = hangmanNodesArray[currentAttempt - 1];\r\n  // stroke-opacity for circle (head)\r\n  const attributeStr =\r\n    currentAttempt - 1 === 0 ? \"stroke-opacity\" : \"fill-opacity\";\r\n  nodeToDraw.setAttribute(attributeStr, \"0.95\");\r\n};\r\n","import { checkKeyDownEvent } from \"../keypad/checkKeyDownEvent\";\r\nimport { handleKeyNodeClickEvent } from \"../keypad/handleKeyNodeClickEvent\";\r\nimport { keypadNodes } from \"./createKeypad\";\r\n\r\ndocument.addEventListener(\"keydown\", (event) =>\r\n  checkKeyDownEvent(event, keypadNodes)\r\n);\r\n\r\nkeypadNodes.forEach(({ letter, node: keyNode }, idx) => {\r\n  keyNode.addEventListener(\"click\", (event) =>\r\n    handleKeyNodeClickEvent(event, letter, idx)\r\n  );\r\n});\r\n","import { keyPadLetters } from \"../common-variables\";\r\nimport {\r\n  hideMsgOnlyEngLetters,\r\n  showMsgOnlyEngLetters,\r\n} from \"../html-structure/message/showMsgOnlyEngLetters\";\r\n\r\nexport const checkKeyDownEvent = (event, keypadNodes) => {\r\n  const keyPressed = event.key;\r\n  if (typeof keyPressed === \"undefined\") {\r\n    return;\r\n  }\r\n  if (\r\n    keyPressed === \"F12\" ||\r\n    keyPressed === \"Shift\" ||\r\n    keyPressed === \"Alt\" ||\r\n    keyPressed === \"Control\"\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const keyPressedUpper = keyPressed.toUpperCase();\r\n  const letterIdx = keyPadLetters.indexOf(keyPressedUpper);\r\n  if (letterIdx >= 0) {\r\n    keypadNodes[letterIdx].node.dispatchEvent(new Event(\"click\"));\r\n  } else {\r\n    showMsgOnlyEngLetters();\r\n    setTimeout(() => hideMsgOnlyEngLetters(), 2000);\r\n  }\r\n};\r\n","import \"./sass/style.scss\";\r\nimport \"./scripts/html-structure/createHtmlStructure\";\r\nimport \"./scripts/html-structure/createKeypad\";\r\nimport \"./scripts/html-structure/addKeypadEventListeners\";\r\nimport { showNewWord } from \"./scripts/word/showNewWord\";\r\n\r\nshowNewWord();\r\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","createElementWithClasses","tagName","classListString","_elementWithClasses$c","elementWithClasses","createElement","classList","add","apply","split","body","appContainer","appendChild","addAppContainer","header","headerTitle","textContent","addHeader","parentElement","gallowSection","gallowContainer","innerHTML","attemptCounterNode","counterSection","counterContainer","counterTitle","counterAttempts","attemptWrong","attemptLine","attemptAll","append","addCounterSection","wordContainer","wordSection","addWordSection","hintText","hintSection","hintContainer","hintTitle","addHintSection","idSymbol","Symbol","keyPadLetters","keypadContainer","keypadSection","addKeypadSection","keypadNodes","map","letter","keyNode","keyLetter","createKeyNode","node","active","createKeysForKeypad","msgOnlyEng","attemptCounter","value","setAttemptCounter","newValue","questions","question","idx","questionWithId","_objectSpread","currentWord","letterNodes","hangmanNodesArray","getElementById","showNewWord","toString","remove","replaceChildren","forEach","_","keyIndex","disabled","attributeStr","setAttribute","questionsQty","randomId","newWordNodesArray","newRandomQuestion","Math","floor","random","find","wordNodes","word","letterNode","line","createLetterNode","isOpen","createLettersForWord","answer","setRandomQuestion","hint","console","log","concat","toUpperCase","join","modalRestart","modalContainer","modalBackdrop","modalHeader","modalTitle","modalImage","modalSubtitle","modalText","modalAnswer","modalPlayAgainBtn","addEventListener","alt","modalRestartNodes","container","title","img","subtitle","text","button","showModalRestart","isGameOver","ImageGameOver","ImageGameOWin","handleKeyNodeClickEvent","event","pressedLetter","keyNodeIndex","target","answerLetters","pressedLetterUpper","includes","every","setTimeout","currentAttempt","addElementToHangman","keyPressed","key","keyPressedUpper","letterIdx","indexOf","dispatchEvent","Event","checkKeyDownEvent","_ref"],"sourceRoot":""}